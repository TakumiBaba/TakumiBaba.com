#!/usr/bin/env coffee
fs = require 'fs'
url = require 'url'
util = require 'util'
path = require 'path'
http = require 'http'
{spawn} = require 'child_process'

PORT = 3000
MODE = 'dev'
INDEX = 'index.html'
GRUNT = 0

while arg = process.argv.shift()
  switch arg
    when '-m', '--mode' then MODE = process.argv.shift()
    when '-p', '--port' then PORT = parseInt process.argv.shift()
    when '-i', '--index' then INDEX = process.argv.shift()
    when '-g', '--grunt' then GRUNT = (spawn 'grunt').pid
    when '-h', '--help'
      console.log '''
        Usage: server [options]

        > fallback-able simple static server for debug

        Options:
          -p, --port  [INT]  server port (3000)
          -m, --mode  [STR]  dev or pro (dev)
          -i, --index [STR]  fallback file (index.html)
          -g, --grunt        spawn grunt watch process

        Example:
          ./server -p 3000 -m dev -i index.html -g
        '''
      process.exit 1

MODE = 'dev' unless MODE in ['dev', 'pro']
ROOT = if MODE is 'dev' then 'dist' else 'public'
INDEX = INDEX.slice 1 while '/' is INDEX.slice 0, 1

index = path.resolve ROOT, INDEX

unless fs.existsSync index
  console.error "server: #{ROOT}/#{INDEX} not found"
  process.exit 1

console.log """
  server: server -p #{PORT} -m #{MODE} -i #{INDEX}#{ if 0 < GRUNT then ' -g' else ''}

  """

print = (exist, req, res) ->
  status = switch yes
    when res.statusCode < 300 then "\x1b[32m#{res.statusCode}\x1b[0m"
    when res.statusCode < 400 then "\x1b[36m#{res.statusCode}\x1b[0m"
    when res.statusCode < 500 then "\x1b[32m#{res.statusCode}\x1b[0m"
    else                           "\x1b[31m#{res.statusCode}\x1b[0m"
  method = "\x1b[37m#{req.method}\x1b[0m"
  fail = "\x1b[35m*\x1b[0m"
  done = "\x1b[32m^\x1b[0m"
  process.stdout.write "#{new Date().toLocaleTimeString()} | #{if exist then done else fail} #{method} #{status} #{req.url}\n"

serve = (route, req, res) ->
  fs.exists route, (exist) ->
    fs.stat route, (err, stat) ->
      if exist and stat.isFile()
        print exist, req, res
        return fs.createReadStream(route).pipe(res)
      print exist, req, res
      return fs.createReadStream(index).pipe(res)

http.createServer (req, res) ->
  route = path.resolve ROOT, (url.parse req.url).pathname.replace /^\//, ''
  return serve route, req, res



  fs.exists route, (exists) ->
    fs.stat route, (err, stat) ->
      if exists and stat.isFile()
        console.log "#{done} #{method} #{status} #{routes}"
        return fs.createReadStream(route).pipe(res)
      fs.createReadStream(index).pipe(res)
.listen PORT

